#pragma kernel computeGrid
#pragma kernel cacheDistField
#pragma kernel clearCachedDistField
#pragma kernel generatePointCloud
#pragma kernel debugDisplayGridPoints
#pragma kernel genMesh
#pragma kernel filterSolidsPerChunk
#include"claySDF.compute"
RWStructuredBuffer<int> indirectChunkArgs1,indirectChunkArgs2;RWStructuredBuffer<float3> gridData;RWStructuredBuffer<int4> pointCloudData;StructuredBuffer<int> triangleConnectionTable;RWStructuredBuffer<int> indirectDrawArgs,numSolidsPerChunk,updateChunks,solidsPerChunk,prefilteredSolidIds,solidsFilter;RWStructuredBuffer<float> fieldCache1;RWStructuredBuffer<uint> fieldCache2;
#if DRAW_DEBUG
RWStructuredBuffer<float3> debugGridOutPoints;
#endif
StructuredBuffer<float3> solidsPos;StructuredBuffer<float4> solidsRot;StructuredBuffer<float3> solidsScale;StructuredBuffer<float> solidsBlend;StructuredBuffer<int> solidsType;StructuredBuffer<float3> solidsColor;StructuredBuffer<float4> solidsAttrs;StructuredBuffer<int> solidsClayObjectId,solidsUpdated;RWStructuredBuffer<int3> meshOutIndices;RWStructuredBuffer<float3> meshOutPoints;RWStructuredBuffer<float4> meshOutColors;uint maxSolids=0,maxSolidsPerVoxel=0,maxSolidsPerVoxelMask=0,chunkId=0,numSolids=0,numSolidsBlending=0;float chunkSize=20.;float3 chunkCenter=float3(0.,0.,0.);int numChunksX=0,numChunksY=0,numChunksZ=0,fieldCacheSize1=0,fieldCacheSize2=0,outMeshIndexOffset=0;float solidsMaxInfluence=0.;uint numSolidsUpdated=0;int alwaysProcessAllChunks=0,retopo=0;static const int3 localGridCellCoords[8]={int3(0,0,0),int3(1,0,0),int3(1,1,0),int3(0,1,0),int3(0,0,1),int3(1,0,1),int3(1,1,1),int3(0,1,1)};static const float3 vertexOffset[8]={float3(0,0,0),float3(1,0,0),float3(1,1,0),float3(0,1,0),float3(0,0,1),float3(1,0,1),float3(1,1,1),float3(0,1,1)};static const int2 edgeConnection[12]={int2(0,1),int2(1,2),int2(2,3),int2(3,0),int2(4,5),int2(5,6),int2(6,7),int2(7,4),int2(0,4),int2(1,5),int2(2,6),int2(3,7)};static const float3 edgeDirection[12]={float3(1.f,0.f,0.f),float3(0.f,1.f,0.f),float3(-1.f,0.f,0.f),float3(0.f,-1.f,0.f),float3(1.f,0.f,0.f),float3(0.f,1.f,0.f),float3(-1.f,0.f,0.f),float3(0.f,-1.f,0.f),float3(0.f,0.f,1.f),float3(0.f,0.f,1.f),float3(0.f,0.f,1.f),float3(0.f,0.f,1.f)},cardinalCellOffset[8]={float3(-1,-1,-1),float3(1,-1,-1),float3(1,1,-1),float3(-1,1,-1),float3(-1,-1,1),float3(1,-1,1),float3(1,1,1),float3(-1,1,1)};static const int cubeEdgeFlags[]={0,265,515,778,1030,1295,1541,1804,2060,2309,2575,2822,3082,3331,3593,3840,400,153,915,666,1430,1183,1941,1692,2460,2197,2975,2710,3482,3219,3993,3728,560,825,51,314,1590,1855,1077,1340,2620,2869,2111,2358,3642,3891,3129,3376,928,681,419,170,1958,1711,1445,1196,2988,2725,2479,2214,4010,3747,3497,3232,1120,1385,1635,1898,102,367,613,876,3180,3429,3695,3942,2154,2403,2665,2912,1520,1273,2035,1786,502,255,1013,764,3580,3317,4095,3830,2554,2291,3065,2800,1616,1881,1107,1370,598,863,85,348,3676,3925,3167,3414,2650,2899,2137,2384,1984,1737,1475,1226,966,719,453,204,4044,3781,3535,3270,3018,2755,2505,2240,2240,2505,2755,3018,3270,3535,3781,4044,204,453,719,966,1226,1475,1737,1984,2384,2137,2899,2650,3414,3167,3925,3676,348,85,863,598,1370,1107,1881,1616,2800,3065,2291,2554,3830,4095,3317,3580,764,1013,255,502,1786,2035,1273,1520,2912,2665,2403,2154,3942,3695,3429,3180,876,613,367,102,1898,1635,1385,1120,3232,3497,3747,4010,2214,2479,2725,2988,1196,1445,1711,1958,170,419,681,928,3376,3129,3891,3642,2358,2111,2869,2620,1340,1077,1855,1590,314,51,825,560,3728,3993,3219,3482,2710,2975,2197,2460,1692,1941,1183,1430,666,915,153,400,3840,3593,3331,3082,2822,2575,2309,2060,1804,1541,1295,1030,778,515,265,0};int f(int f,int i,int c,int s){return f+s*(i+s*c);}uint f(float3 f){uint s=uint(f.x*255)+uint(f.y*255)*256+uint(f.z*255)*256*256;return s;}uint s(float f,float i,float s,float u){uint r=uint(f*63.),M=uint(i*63.),z=uint(s*63.),e=uint((u+1.)*.5*16383.),c=((r<<6|M)<<6|z)<<14|e;return c;}float4 s(uint f){float i=float(f&16383)/16383*2.-1.;f>>=14;float s=float(f&63)/63;f>>=6;float c=float(f&63)/63,u=float(f>>6)/63;return float4(u,c,s,i);}float f(float f,float i,float s){float c=max(s-abs(f-i),0.);return min(f,i)-c*c*.25f/s;}float s(float f,float i,float s){float c=abs(s),e=max(c-abs(-f-i),0.);return max(-f,i)+e*e*.25/c;}bool f(uint f,uint c){uint s=c/32;int i=solidsFilter[f*maxSolidsPerVoxelMask+s],u=c-32*s;if(i>>u&1)return true;return true;}void s(uint f,uint c){uint s=c/32;int t=solidsFilter[f*maxSolidsPerVoxelMask+s],i=c-32*s;solidsFilter[f*maxSolidsPerVoxelMask+s]=t&~(1<<i);}bool c(int f){return f>>0&1;}float c(float3 i,float y,float S,uint e,uint u){float r;
#if CLAYXELS_CACHEON
r=fieldCache1[chunkId*fieldCacheSize1+u];
#else
r=1e+10;
#endif
int t=0;uint k=u*maxSolidsPerVoxel;for(uint x=0;x<e;++x){if(!f(u,x)){continue;}uint g=prefilteredSolidIds[k+x];float M=solidsBlend[g];float4 m=solidsAttrs[g];float z=computeClayDistanceFunction(solidsType[g],i,solidsPos[g],solidsRot[g],solidsScale[g],m);if(!c(m.w)){if(M==0.)r=min(z,r);else if(M>0.)r=f(z,r,M);else r=s(z,r,M);}if(z>S)s(u,x);S-=abs(M);}return r;}float c(float3 i,float u,out int r,out float3 z,uint e,uint t,uint x){float S;
#if CLAYXELS_CACHEON
float4 m=s(fieldCache2[chunkId*fieldCacheSize2+x]);S=m.w;z=m.xyz;
#else
S=1e+10;z=float3(1.,1.,1.);
#endif
uint g=t*maxSolidsPerVoxel;for(uint M=0;M<e;++M){if(!f(t,M)){continue;}uint n=prefilteredSolidIds[g+M];float y=solidsBlend[n];float3 k=solidsColor[n];float4 D=solidsAttrs[n];float d=computeClayDistanceFunction(solidsType[n],i,solidsPos[n],solidsRot[n],solidsScale[n],D);if(d<S)r=n;bool w=c(D.w);if(y==0.){float o=clamp((S-d)/(u*2.),0.,1.);z=lerp(z,k,o);if(!w)S=min(d,S);}else if(y>0.){float o=clamp(.5+.5*(d-S)/y,0.,1.);z=lerp(k,z,o);if(!w)S=f(d,S,y);}else{float o=clamp(.5+.5*(-d-S)/y,0.,1.);z=lerp(k,z,o);if(!w)S=s(d,S,y);if(o<.5)r=n;}}return S;}float3 r(int f){int i=(f&255)>>0,s=(f&65280)>>8,M=(f&16711680)>>16;return float3(i/255.,s/255.,M/255.);}bool t(int3 f){if(f.x<0)return true;if(f.x>255)return true;if(f.y<0)return true;if(f.y>255)return true;if(f.z<0)return true;if(f.z>255)return true;return false;}float d(int4 f){float s=0.;for(uint i=0;i<numSolids;++i)s+=abs(solidsBlend[i]);return s;}float3 c(int3 f,float i){float s=i*.5,z=chunkSize*.5;float3 c=float3(i*f.x-z,i*f.y-z,i*f.z-z)+s;return c;}void d(float3 f,float s,uint c,inout uint i,inout float r){uint e=numSolidsPerChunk[chunkId],M=c*maxSolidsPerVoxel,u=0;for(u=0;u<e;++u){uint n=solidsPerChunk[chunkId*maxSolids+u];float3 z=solidsScale[n],S=f;if(int(solidsAttrs[n].w)>>1&1)S.x=abs(S.x);float t=max(z.x,max(z.y,z.z))*1.732,o=length(solidsPos[n]-S)-t;if(o<2.){prefilteredSolidIds[M+i]=n;i+=1;r+=abs(solidsBlend[n]);if(i==maxSolidsPerVoxel){break;}}}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void computeGrid(int3 i:SV_DispatchThreadID){float s=chunkSize/64;float3 u=c(i,s);int z=f(i.x,i.y,i.z,64);if(z==0)indirectDrawArgs[0]=0;uint r=0;float M=0.;d(u+chunkCenter,s*.5,z,r,M);float t=s*.25,S=t*.5,o=s*.5,x=chunkSize/256,e=chunkSize*.5;int n=z*maxSolidsPerVoxelMask;for(uint g=0;g<maxSolidsPerVoxelMask;++g)solidsFilter[n+g]=-1;float k=c(u+chunkCenter,s,M+s,r,z);for(uint y=0;y<8;++y){float3 m=u+t*cardinalCellOffset[y];for(uint D=0;D<8;++D){float3 v=m+S*cardinalCellOffset[D];int3 a=int3(round((v.x+e-S)/x),round((v.y+e-S)/x),round((v.z+e-S)/x));int w=f(a.x,a.y,a.z,256);gridData[w]=float3(0,0,0);if(abs(k)<s){int p=0;float3 l=float3(1.,1.,1.);float C=c(v+chunkCenter,S,p,l,r,z,w);if(abs(C)<o){int X=solidsClayObjectId[p]+1;gridData[w]=float3(C,f(l),X);}}}}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void cacheDistField(int3 i:SV_DispatchThreadID){if(numSolidsPerChunk[chunkId]==0){return;}float z=chunkSize/64;float3 u=c(i,z);int x=f(i.x,i.y,i.z,64);uint r=0;float M=0.;d(u+chunkCenter,z*.5,x,r,M);float t=z*.25,S=t*.5,o=z*.5,y=chunkSize/256,e=chunkSize*.5;int n=x*maxSolidsPerVoxelMask;for(uint g=0;g<maxSolidsPerVoxelMask;++g)solidsFilter[n+g]=-1;float m=c(u+chunkCenter,z,M+z,r,x);fieldCache1[chunkId*fieldCacheSize1+x]=m;for(uint D=0;D<8;++D){float3 k=u+t*cardinalCellOffset[D];for(uint w=0;w<8;++w){float3 v=k+S*cardinalCellOffset[w];int3 a=int3(round((v.x+e-S)/y),round((v.y+e-S)/y),round((v.z+e-S)/y));int l=f(a.x,a.y,a.z,256);gridData[l]=float3(0,0,0);int p=0;float3 C=float3(1.,1.,1.);float X=c(v+chunkCenter,S,p,C,r,x,l);fieldCache2[chunkId*fieldCacheSize2+l]=s(C.x,C.y,C.z,clamp(X,-1.,1.));}}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void clearCachedDistField(int3 i:SV_DispatchThreadID){float z=chunkSize/64;float3 t=c(i,z);int g=f(i.x,i.y,i.z,64);float u=z*.25,S=u*.5,M=z*.5,r=chunkSize/256,e=chunkSize*.5;fieldCache1[chunkId*fieldCacheSize1+g]=1.;float m=s(1.,1.,1.,1.);for(uint x=0;x<8;++x){float3 k=t+u*cardinalCellOffset[x];for(uint n=0;n<8;++n){float3 v=k+S*cardinalCellOffset[n];int3 o=int3(round((v.x+e-S)/r),round((v.y+e-S)/r),round((v.z+e-S)/r));int y=f(o.x,o.y,o.z,256);fieldCache2[chunkId*fieldCacheSize2+y]=m;}}}float d(float f,float c){float s=c-f,i=.5;if(s!=0.)i=f/s;return i;}float2 i(float2 f){float2 s=f.xy>=0.?1.:-1.,i=(1.-abs(f.yx))*s;return i;}float m(float2 f){int i=2048;float c=floor(f.x*(i-1)),s=floor(f.y*(i-1)),r=c*i+s;return r;}float g(float3 f){f/=abs(f.x)+abs(f.y)+abs(f.z);f.xy=f.z>=0.?f.xy:i(f.xy);f.xy=f.xy*.5+.5;float s=m(f.xy);return s;}int c(uint f,uint r,uint i,uint s){int c=f<<24|r<<16|i<<8|s;return c;}float u(float3 f){float s=dot(round(f*255),float3(65536,256,1));return s;}groupshared int4 gs_pointCloudData[256];groupshared uint gs_numElements,gs_globalOffset;void c(int3 i,float s,int S){int n=f(i.x,i.y,i.z,256);float3 t=gridData[n];if(t.z==0.){return;}float e[8];int r=0;for(int x=0;x<8;++x){int3 z=i+localGridCellCoords[x];int k=f(z.x,z.y,z.z,256);float3 m=gridData[k];if(m.z==0.){return;}e[x]=m.x;if(m.x<=0.)r|=1<<x;}int z=cubeEdgeFlags[r];if(z==0){return;}float3 m=i;int k=r*16,M[3]={triangleConnectionTable[k+3],triangleConnectionTable[k+4],triangleConnectionTable[k+5]};float3 v=float3(0,0,0),a[3];int y;for(y=0;y<3;++y){int o=M[y];float C=e[edgeConnection[o].x],D=e[edgeConnection[o].y],X=d(C,D);float3 l=m+(vertexOffset[edgeConnection[o].x]-X*edgeDirection[o])*s;a[y]=l;v+=l;}float3 o=cross(a[2]-a[0],a[1]-a[0]);if(sqrt(dot(o,o))>0.){M[0]=triangleConnectionTable[k];M[1]=triangleConnectionTable[k+1];M[2]=triangleConnectionTable[k+2];for(y=0;y<3;++y){int D=M[y];float C=e[edgeConnection[D].x],w=e[edgeConnection[D].y],X=d(C,w);float3 l=m+(vertexOffset[edgeConnection[D].x]-X*edgeDirection[D])*s;a[y]=l;}o+=cross(a[2]-a[0],a[1]-a[0]);M[0]=triangleConnectionTable[k+6];M[1]=triangleConnectionTable[k+7];M[2]=triangleConnectionTable[k+8];for(y=0;y<3;++y){int D=M[y];float C=e[edgeConnection[D].x],w=e[edgeConnection[D].y],X=d(C,w);float3 l=m+(vertexOffset[edgeConnection[D].x]-X*edgeDirection[D])*s;a[y]=l;}o+=cross(a[2]-a[0],a[1]-a[0]);M[0]=triangleConnectionTable[k+9];M[1]=triangleConnectionTable[k+10];M[2]=triangleConnectionTable[k+11];for(y=0;y<3;++y){int D=M[y];float C=e[edgeConnection[D].x],w=e[edgeConnection[D].y],X=d(C,w);float3 l=m+(vertexOffset[edgeConnection[D].x]-X*edgeDirection[D])*s;a[y]=l;}o+=cross(a[2]-a[0],a[1]-a[0]);o=normalize(o);v/=3;float3 D=(v-m)/s;uint C=uint(u(D));float l=g(o);int w=t.y,X=t.z;if(X>255)X=255;int p=0;InterlockedAdd(gs_numElements,1,p);gs_pointCloudData[p]=int4(c(i.x,i.y,i.z,X),C,l,w);}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void generatePointCloud(int3 f:SV_DispatchThreadID,uint i:SV_GroupIndex){if(i==0)gs_numElements=0,gs_globalOffset=0;GroupMemoryBarrierWithGroupSync();float s=chunkSize/256;c(f,s,i);GroupMemoryBarrierWithGroupSync();if(i==0)InterlockedAdd(indirectDrawArgs[0],gs_numElements*3,gs_globalOffset),gs_globalOffset/=3;GroupMemoryBarrierWithGroupSync();if(i<gs_numElements)pointCloudData[gs_globalOffset+i]=gs_pointCloudData[i];}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void debugDisplayGridPoints(int3 i:SV_DispatchThreadID){
#if DRAW_DEBUG
int s=f(i.x,i.y,i.z,256);if(gridData[s].z!=0.){int n=debugGridOutPoints.IncrementCounter();float z=chunkSize/256;debugGridOutPoints[n]=c(i,z)+chunkCenter;}
#endif
}float4 p(uint f){int i=(f&255)>>0,s=(f&65280)>>8,z=(f&16711680)>>16;return float4(i/255.,s/255.,z/255.,1.);}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void genMesh(int3 i:SV_DispatchThreadID){float s=chunkSize/256;int n=f(i.x,i.y,i.z,256);float3 u=gridData[n];if(retopo==0){if(u.z==0.){return;}}float t[8];int e=0,z=0;for(int r=0;r<8;++r){int3 M=i+localGridCellCoords[r];if(M.x<0||M.y<0||M.z<0||M.x>255||M.y>255||M.z>255){return;}int D=f(M.x,M.y,M.z,256);float3 m=gridData[D];t[r]=m.x;if(m.z==0.){if(retopo==0){z+=1;if(z>1){return;}}else{continue;}}if(m.x<0.)e|=1<<r;}int y=cubeEdgeFlags[e];if(y<0){return;}float3 m=c(i,s),M[12];for(int D=0;D<12;++D){if((y&1<<D)!=0){float S=t[edgeConnection[D].x],o=t[edgeConnection[D].y],X=d(S,o);M[D]=m+(vertexOffset[edgeConnection[D].x]-X*edgeDirection[D])*s;}}int k=e*16;for(int S=0;S<5;++S){int x=3*S;if(triangleConnectionTable[k+x]>=0){uint g=meshOutIndices.IncrementCounter();for(int o=0;o<3;++o){int l=triangleConnectionTable[k+x+o],w=g*3+o,X=u.y;meshOutPoints[w]=M[l]+chunkCenter;meshOutColors[w]=p(X);meshOutIndices[g][2-o]=w+outMeshIndexOffset;}}}}[numthreads(1,1,1)]void filterSolidsPerChunk(int3 f:SV_DispatchThreadID){int s=f.x+f.y*numChunksX+numChunksX*numChunksY*f.z;float i=chunkSize/256.f,z=chunkSize-i,M=chunkSize*.5;float3 c=float3(-(chunkSize*numChunksX*.5)+M+z*f.x,-(chunkSize*numChunksY*.5)+M+z*f.y,-(chunkSize*numChunksZ*.5)+M+z*f.z);float S=chunkSize*1.732*.5;int k=s*3,r=0;if(!alwaysProcessAllChunks)r=updateChunks[s]-1;int e=0;for(uint D=0;D<numSolids;++D){float3 u=solidsScale[D];float t=max(u.x,max(u.y,u.z))*1.732;float3 m=c;if(checkMirrorX(solidsAttrs[D].w))m.x=abs(m.x);float y=length(solidsPos[D]-m)-t;if(y<S){solidsPerChunk[s*maxSolids+e]=D;e+=1;if(alwaysProcessAllChunks==0){if(r<=0){for(uint x=0;x<numSolidsUpdated;++x){uint o=solidsUpdated[x];if(o==D){r=1;break;}}}}}}numSolidsPerChunk[s]=e;if(alwaysProcessAllChunks==0){uint t=0,m=0;if(r>-1)t=64/MAXTHREADS,m=256/MAXTHREADS;updateChunks[s]=r;indirectChunkArgs1[k]=t;indirectChunkArgs1[k+1]=t;indirectChunkArgs1[k+2]=t;indirectChunkArgs2[k]=m;indirectChunkArgs2[k+1]=m;indirectChunkArgs2[k+2]=m;}}